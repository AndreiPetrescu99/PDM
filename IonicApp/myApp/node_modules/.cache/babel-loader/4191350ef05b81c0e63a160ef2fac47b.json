{"ast":null,"code":"import { useCamera } from '@ionic/react-hooks/camera';\nimport { CameraResultType, CameraSource, FilesystemDirectory } from '@capacitor/core';\nimport { useEffect, useState } from 'react';\nimport { base64FromPath, useFilesystem } from '@ionic/react-hooks/filesystem';\nimport { useStorage } from '@ionic/react-hooks/storage';\nconst PHOTO_STORAGE = 'photos';\nexport function usePhotoGallery() {\n  const {\n    getPhoto\n  } = useCamera();\n  const [photos, setPhotos] = useState([]);\n\n  const takePhoto = async () => {\n    const cameraPhoto = await getPhoto({\n      resultType: CameraResultType.Uri,\n      source: CameraSource.Camera,\n      quality: 100\n    });\n    const fileName = new Date().getTime() + '.jpeg';\n    const savedFileImage = await savePicture(cameraPhoto, fileName);\n    const newPhotos = [savedFileImage, ...photos];\n    setPhotos(newPhotos);\n    set(PHOTO_STORAGE, JSON.stringify(newPhotos));\n  };\n\n  const {\n    readFile,\n    writeFile\n  } = useFilesystem();\n\n  const savePicture = async (photo, fileName) => {\n    const base64Data = await base64FromPath(photo.webPath);\n    const savedFile = await writeFile({\n      path: fileName,\n      data: base64Data,\n      directory: FilesystemDirectory.Data\n    });\n    return {\n      filepath: fileName,\n      webviewPath: photo.webPath\n    };\n  };\n\n  const {\n    get,\n    set\n  } = useStorage();\n  useEffect(() => {\n    const loadSaved = async () => {\n      const photosString = await get(PHOTO_STORAGE);\n      const photos = photosString ? JSON.parse(photosString) : [];\n\n      for (let photo of photos) {\n        const file = await readFile({\n          path: photo.filepath,\n          directory: FilesystemDirectory.Data\n        });\n        photo.webviewPath = `data:image/jpeg;base64,${file.data}`;\n      }\n\n      setPhotos(photos);\n    };\n\n    loadSaved();\n  }, [get, readFile]);\n  return {\n    photos,\n    takePhoto\n  };\n}","map":{"version":3,"sources":["D:/PDM/IonicApp/myApp/src/todo/usePhotoGallery.tsx"],"names":["useCamera","CameraResultType","CameraSource","FilesystemDirectory","useEffect","useState","base64FromPath","useFilesystem","useStorage","PHOTO_STORAGE","usePhotoGallery","getPhoto","photos","setPhotos","takePhoto","cameraPhoto","resultType","Uri","source","Camera","quality","fileName","Date","getTime","savedFileImage","savePicture","newPhotos","set","JSON","stringify","readFile","writeFile","photo","base64Data","webPath","savedFile","path","data","directory","Data","filepath","webviewPath","get","loadSaved","photosString","parse","file"],"mappings":"AAAA,SAASA,SAAT,QAA0B,2BAA1B;AACA,SAAsBC,gBAAtB,EAAwCC,YAAxC,EAAsDC,mBAAtD,QAAiF,iBAAjF;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,cAAT,EAAyBC,aAAzB,QAA8C,+BAA9C;AACA,SAASC,UAAT,QAA2B,4BAA3B;AAOA,MAAMC,aAAa,GAAG,QAAtB;AAEA,OAAO,SAASC,eAAT,GAA2B;AAChC,QAAM;AAAEC,IAAAA;AAAF,MAAeX,SAAS,EAA9B;AACA,QAAM,CAACY,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAU,EAAV,CAApC;;AAEA,QAAMS,SAAS,GAAG,YAAY;AAC5B,UAAMC,WAAW,GAAG,MAAMJ,QAAQ,CAAC;AACjCK,MAAAA,UAAU,EAAEf,gBAAgB,CAACgB,GADI;AAEjCC,MAAAA,MAAM,EAAEhB,YAAY,CAACiB,MAFY;AAGjCC,MAAAA,OAAO,EAAE;AAHwB,KAAD,CAAlC;AAKA,UAAMC,QAAQ,GAAG,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,OAAxC;AACA,UAAMC,cAAc,GAAG,MAAMC,WAAW,CAACV,WAAD,EAAcM,QAAd,CAAxC;AACA,UAAMK,SAAS,GAAG,CAACF,cAAD,EAAiB,GAAGZ,MAApB,CAAlB;AACAC,IAAAA,SAAS,CAACa,SAAD,CAAT;AACAC,IAAAA,GAAG,CAAClB,aAAD,EAAgBmB,IAAI,CAACC,SAAL,CAAeH,SAAf,CAAhB,CAAH;AACD,GAXD;;AAaA,QAAM;AAAEI,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAA0BxB,aAAa,EAA7C;;AACA,QAAMkB,WAAW,GAAG,OAAOO,KAAP,EAA2BX,QAA3B,KAAgE;AAClF,UAAMY,UAAU,GAAG,MAAM3B,cAAc,CAAC0B,KAAK,CAACE,OAAP,CAAvC;AACA,UAAMC,SAAS,GAAG,MAAMJ,SAAS,CAAC;AAChCK,MAAAA,IAAI,EAAEf,QAD0B;AAEhCgB,MAAAA,IAAI,EAAEJ,UAF0B;AAGhCK,MAAAA,SAAS,EAAEnC,mBAAmB,CAACoC;AAHC,KAAD,CAAjC;AAMA,WAAO;AACLC,MAAAA,QAAQ,EAAEnB,QADL;AAELoB,MAAAA,WAAW,EAAET,KAAK,CAACE;AAFd,KAAP;AAID,GAZD;;AAcA,QAAM;AAAEQ,IAAAA,GAAF;AAAOf,IAAAA;AAAP,MAAenB,UAAU,EAA/B;AACAJ,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMuC,SAAS,GAAG,YAAY;AAC5B,YAAMC,YAAY,GAAG,MAAMF,GAAG,CAACjC,aAAD,CAA9B;AACA,YAAMG,MAAM,GAAIgC,YAAY,GAAGhB,IAAI,CAACiB,KAAL,CAAWD,YAAX,CAAH,GAA8B,EAA1D;;AACA,WAAK,IAAIZ,KAAT,IAAkBpB,MAAlB,EAA0B;AACxB,cAAMkC,IAAI,GAAG,MAAMhB,QAAQ,CAAC;AAC1BM,UAAAA,IAAI,EAAEJ,KAAK,CAACQ,QADc;AAE1BF,UAAAA,SAAS,EAAEnC,mBAAmB,CAACoC;AAFL,SAAD,CAA3B;AAIAP,QAAAA,KAAK,CAACS,WAAN,GAAqB,0BAAyBK,IAAI,CAACT,IAAK,EAAxD;AACD;;AACDxB,MAAAA,SAAS,CAACD,MAAD,CAAT;AACD,KAXD;;AAYA+B,IAAAA,SAAS;AACV,GAdQ,EAcN,CAACD,GAAD,EAAMZ,QAAN,CAdM,CAAT;AAgBA,SAAO;AACLlB,IAAAA,MADK;AAELE,IAAAA;AAFK,GAAP;AAID","sourcesContent":["import { useCamera } from '@ionic/react-hooks/camera';\r\nimport { CameraPhoto, CameraResultType, CameraSource, FilesystemDirectory } from '@capacitor/core';\r\nimport { useEffect, useState } from 'react';\r\nimport { base64FromPath, useFilesystem } from '@ionic/react-hooks/filesystem';\r\nimport { useStorage } from '@ionic/react-hooks/storage';\r\n\r\nexport interface Photo {\r\n  filepath: string;\r\n  webviewPath?: string;\r\n}\r\n\r\nconst PHOTO_STORAGE = 'photos';\r\n\r\nexport function usePhotoGallery() {\r\n  const { getPhoto } = useCamera();\r\n  const [photos, setPhotos] = useState<Photo[]>([]);\r\n\r\n  const takePhoto = async () => {\r\n    const cameraPhoto = await getPhoto({\r\n      resultType: CameraResultType.Uri,\r\n      source: CameraSource.Camera,\r\n      quality: 100\r\n    });\r\n    const fileName = new Date().getTime() + '.jpeg';\r\n    const savedFileImage = await savePicture(cameraPhoto, fileName);\r\n    const newPhotos = [savedFileImage, ...photos];\r\n    setPhotos(newPhotos);\r\n    set(PHOTO_STORAGE, JSON.stringify(newPhotos));\r\n  };\r\n\r\n  const { readFile, writeFile } = useFilesystem();\r\n  const savePicture = async (photo: CameraPhoto, fileName: string): Promise<Photo> => {\r\n    const base64Data = await base64FromPath(photo.webPath!);\r\n    const savedFile = await writeFile({\r\n      path: fileName,\r\n      data: base64Data,\r\n      directory: FilesystemDirectory.Data\r\n    });\r\n\r\n    return {\r\n      filepath: fileName,\r\n      webviewPath: photo.webPath\r\n    };\r\n  };\r\n\r\n  const { get, set } = useStorage();\r\n  useEffect(() => {\r\n    const loadSaved = async () => {\r\n      const photosString = await get(PHOTO_STORAGE);\r\n      const photos = (photosString ? JSON.parse(photosString) : []) as Photo[];\r\n      for (let photo of photos) {\r\n        const file = await readFile({\r\n          path: photo.filepath,\r\n          directory: FilesystemDirectory.Data\r\n        });\r\n        photo.webviewPath = `data:image/jpeg;base64,${file.data}`;\r\n      }\r\n      setPhotos(photos);\r\n    };\r\n    loadSaved();\r\n  }, [get, readFile]);\r\n\r\n  return {\r\n    photos,\r\n    takePhoto\r\n  };\r\n}"]},"metadata":{},"sourceType":"module"}