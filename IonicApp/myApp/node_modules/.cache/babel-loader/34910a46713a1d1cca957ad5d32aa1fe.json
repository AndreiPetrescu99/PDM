{"ast":null,"code":"import { getLogger } from \"../core\";\nimport { useEffect, useReducer } from \"react\";\nimport { getTrains } from \"./TrainsAPI\";\nconst log = getLogger('useTrains');\nconst initialState = {\n  trains: undefined,\n  fetching: false,\n  fetchingError: undefined\n};\nconst FETCH_TRAINS_STARTED = 'FETCH_TRAINS_STARTED';\nconst FETCH_TRAINS_SUCCEDED = 'FETCH_TRAINS_SUCCEDED';\nconst FETCH_TRAINS_FAILED = 'FETCH_TRAINS_FAILED';\n\nconst reducer = (state, {\n  type,\n  payload\n}) => {\n  switch (type) {\n    case FETCH_TRAINS_STARTED:\n      return { ...state,\n        fetching: true\n      };\n\n    case FETCH_TRAINS_SUCCEDED:\n      return { ...state,\n        trains: payload.trains,\n        fetching: false\n      };\n\n    case FETCH_TRAINS_FAILED:\n      return { ...state,\n        fetchingError: payload.error,\n        fetching: false\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const useTrains = () => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const {\n    trains,\n    fetching,\n    fetchingError\n  } = state;\n\n  const changeSeats = () => {\n    log(\"changeSeats - TODO\");\n  };\n\n  useEffect(getTrainsEffect, []);\n  log(\"Returns...\");\n  return {\n    trains,\n    fetching,\n    fetchingError,\n    changeSeats\n  };\n\n  function getTrainsEffect() {\n    let canceled = false;\n    fetchTrains();\n    return () => {\n      canceled = true;\n    };\n\n    async function fetchTrains() {\n      try {\n        log('Trying to fetch trains...');\n        dispatch({\n          type: FETCH_TRAINS_STARTED\n        });\n        const trains = await getTrains();\n        log(\"Yaay trains fetched\");\n\n        if (!canceled) {\n          dispatch({\n            type: FETCH_TRAINS_SUCCEDED,\n            payload: {\n              trains\n            }\n          });\n        }\n      } catch (error) {\n        log(\"Error sorry (not trains got)\");\n        dispatch({\n          type: FETCH_TRAINS_FAILED,\n          payload: {\n            error\n          }\n        });\n      }\n    }\n  }\n};","map":{"version":3,"sources":["D:/PDM/IonicApp/myApp/src/todo/useTrains.tsx"],"names":["getLogger","useEffect","useReducer","getTrains","log","initialState","trains","undefined","fetching","fetchingError","FETCH_TRAINS_STARTED","FETCH_TRAINS_SUCCEDED","FETCH_TRAINS_FAILED","reducer","state","type","payload","error","useTrains","dispatch","changeSeats","getTrainsEffect","canceled","fetchTrains"],"mappings":"AAAA,SAAQA,SAAR,QAAwB,SAAxB;AACA,SAAQC,SAAR,EAAmBC,UAAnB,QAA8C,OAA9C;AAGA,SAAQC,SAAR,QAAwB,aAAxB;AAGA,MAAMC,GAAG,GAAGJ,SAAS,CAAC,WAAD,CAArB;AAiBA,MAAMK,YAAyB,GAAG;AAC9BC,EAAAA,MAAM,EAAEC,SADsB;AAE9BC,EAAAA,QAAQ,EAAE,KAFoB;AAG9BC,EAAAA,aAAa,EAAEF;AAHe,CAAlC;AAMA,MAAMG,oBAAoB,GAAG,sBAA7B;AACA,MAAMC,qBAAqB,GAAG,uBAA9B;AACA,MAAMC,mBAAmB,GAAG,qBAA5B;;AAEA,MAAMC,OAAiE,GACnE,CAACC,KAAD,EAAQ;AAACC,EAAAA,IAAD;AAAOC,EAAAA;AAAP,CAAR,KAA2B;AACvB,UAAQD,IAAR;AACI,SAAKL,oBAAL;AACI,aAAM,EAAC,GAAGI,KAAJ;AAAWN,QAAAA,QAAQ,EAAE;AAArB,OAAN;;AACJ,SAAKG,qBAAL;AACI,aAAO,EAAC,GAAGG,KAAJ;AAAWR,QAAAA,MAAM,EAAEU,OAAO,CAACV,MAA3B;AAAmCE,QAAAA,QAAQ,EAAE;AAA7C,OAAP;;AACJ,SAAKI,mBAAL;AACI,aAAO,EAAC,GAAGE,KAAJ;AAAWL,QAAAA,aAAa,EAACO,OAAO,CAACC,KAAjC;AAAwCT,QAAAA,QAAQ,EAAE;AAAlD,OAAP;;AACJ;AACI,aAAOM,KAAP;AARR;AAUH,CAZL;;AAeA,OAAO,MAAMI,SAA4B,GAAG,MAAM;AAC9C,QAAM,CAACJ,KAAD,EAAQK,QAAR,IAAoBjB,UAAU,CAACW,OAAD,EAAUR,YAAV,CAApC;AAEA,QAAM;AAACC,IAAAA,MAAD;AAASE,IAAAA,QAAT;AAAmBC,IAAAA;AAAnB,MAAoCK,KAA1C;;AAEA,QAAMM,WAAW,GAAG,MAAM;AACtBhB,IAAAA,GAAG,CAAC,oBAAD,CAAH;AACH,GAFD;;AAGAH,EAAAA,SAAS,CAACoB,eAAD,EAAkB,EAAlB,CAAT;AAEAjB,EAAAA,GAAG,CAAC,YAAD,CAAH;AACA,SAAM;AACFE,IAAAA,MADE;AAEFE,IAAAA,QAFE;AAGFC,IAAAA,aAHE;AAIFW,IAAAA;AAJE,GAAN;;AAOA,WAASC,eAAT,GAA0B;AACtB,QAAIC,QAAQ,GAAG,KAAf;AACAC,IAAAA,WAAW;AAEX,WAAO,MAAM;AACTD,MAAAA,QAAQ,GAAG,IAAX;AACH,KAFD;;AAIA,mBAAeC,WAAf,GAA4B;AACxB,UAAG;AACCnB,QAAAA,GAAG,CAAC,2BAAD,CAAH;AACAe,QAAAA,QAAQ,CAAC;AAACJ,UAAAA,IAAI,EAAEL;AAAP,SAAD,CAAR;AACA,cAAMJ,MAAM,GAAG,MAAMH,SAAS,EAA9B;AACAC,QAAAA,GAAG,CAAC,qBAAD,CAAH;;AACA,YAAG,CAACkB,QAAJ,EAAa;AACTH,UAAAA,QAAQ,CAAC;AAACJ,YAAAA,IAAI,EAACJ,qBAAN;AAA6BK,YAAAA,OAAO,EAAC;AAACV,cAAAA;AAAD;AAArC,WAAD,CAAR;AACH;AACJ,OARD,CAQC,OAAOW,KAAP,EAAa;AACVb,QAAAA,GAAG,CAAC,8BAAD,CAAH;AACAe,QAAAA,QAAQ,CAAC;AAACJ,UAAAA,IAAI,EAAEH,mBAAP;AAA4BI,UAAAA,OAAO,EAAE;AAACC,YAAAA;AAAD;AAArC,SAAD,CAAR;AACH;AACJ;AACJ;AACJ,CAzCM","sourcesContent":["import {getLogger} from \"../core\";\r\nimport {useEffect, useReducer, useState} from \"react\";\r\nimport {TrainProps} from \"./TrainProps\";\r\nimport {isNullOrUndefined} from \"util\";\r\nimport {getTrains} from \"./TrainsAPI\";\r\n\r\n\r\nconst log = getLogger('useTrains');\r\n\r\nexport interface TrainsState{\r\n    trains?: TrainProps[];\r\n    fetching: boolean;\r\n    fetchingError?: Error;\r\n}\r\n\r\nexport interface TrainsProps extends TrainsState{\r\n    changeSeats: () => void;\r\n}\r\n\r\ninterface ActionProps{\r\n    type:string,\r\n    payload?: any,\r\n}\r\n\r\nconst initialState: TrainsState = {\r\n    trains: undefined,\r\n    fetching: false,\r\n    fetchingError: undefined,\r\n}\r\n\r\nconst FETCH_TRAINS_STARTED = 'FETCH_TRAINS_STARTED';\r\nconst FETCH_TRAINS_SUCCEDED = 'FETCH_TRAINS_SUCCEDED';\r\nconst FETCH_TRAINS_FAILED = 'FETCH_TRAINS_FAILED';\r\n\r\nconst reducer: (state: TrainsState, action: ActionProps) => TrainsState =\r\n    (state, {type, payload}) =>{\r\n        switch (type){\r\n            case FETCH_TRAINS_STARTED:\r\n                return{...state, fetching: true};\r\n            case FETCH_TRAINS_SUCCEDED:\r\n                return {...state, trains: payload.trains, fetching: false};\r\n            case FETCH_TRAINS_FAILED:\r\n                return {...state, fetchingError:payload.error, fetching: false};\r\n            default:\r\n                return state;\r\n        }\r\n    };\r\n\r\n\r\nexport const useTrains: () => TrainsProps = () => {\r\n    const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n    const {trains, fetching, fetchingError} = state;\r\n\r\n    const changeSeats = () => {\r\n        log(\"changeSeats - TODO\");\r\n    }\r\n    useEffect(getTrainsEffect, []);\r\n\r\n    log(\"Returns...\")\r\n    return{\r\n        trains,\r\n        fetching,\r\n        fetchingError,\r\n        changeSeats,\r\n    };\r\n\r\n    function getTrainsEffect(){\r\n        let canceled = false;\r\n        fetchTrains();\r\n\r\n        return () => {\r\n            canceled = true;\r\n        }\r\n\r\n        async function fetchTrains(){\r\n            try{\r\n                log('Trying to fetch trains...');\r\n                dispatch({type: FETCH_TRAINS_STARTED});\r\n                const trains = await getTrains();\r\n                log(\"Yaay trains fetched\");\r\n                if(!canceled){\r\n                    dispatch({type:FETCH_TRAINS_SUCCEDED, payload:{trains}});\r\n                }\r\n            }catch (error){\r\n                log(\"Error sorry (not trains got)\");\r\n                dispatch({type: FETCH_TRAINS_FAILED, payload: {error}});\r\n            }\r\n        }\r\n    }\r\n};"]},"metadata":{},"sourceType":"module"}