{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport { Plugins } from '@capacitor/core';\nconst {\n  App\n} = Plugins;\nconst {\n  Storage\n} = Plugins;\nconst initialState = {\n  isActive: true\n};\nexport const useAppState = () => {\n  const [appState, setAppState] = useState(initialState);\n  useEffect(() => {\n    const handler = App.addListener('appStateChange', handleAppStateChange);\n    App.getState().then(handleAppStateChange);\n    let canceled = false;\n    return () => {\n      canceled = true;\n      handler.remove();\n    };\n\n    function handleAppStateChange(state) {\n      console.log('useAppState - state change', state);\n\n      if (!canceled) {\n        setAppState(state);\n      }\n    }\n  }, []);\n  return {\n    appState\n  };\n};","map":{"version":3,"sources":["D:/PDM/IonicApp/myApp/src/network/useAppState.tsx"],"names":["useEffect","useState","Plugins","App","Storage","initialState","isActive","useAppState","appState","setAppState","handler","addListener","handleAppStateChange","getState","then","canceled","remove","state","console","log"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAAmBC,OAAnB,QAAkC,iBAAlC;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAUD,OAAhB;AACA,MAAM;AAACE,EAAAA;AAAD,IAAYF,OAAlB;AAEA,MAAMG,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE;AADS,CAArB;AAIA,OAAO,MAAMC,WAAW,GAAG,MAAM;AAC/B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAACI,YAAD,CAAxC;AACAL,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMU,OAAO,GAAGP,GAAG,CAACQ,WAAJ,CAAgB,gBAAhB,EAAkCC,oBAAlC,CAAhB;AACAT,IAAAA,GAAG,CAACU,QAAJ,GAAeC,IAAf,CAAoBF,oBAApB;AACA,QAAIG,QAAQ,GAAG,KAAf;AACA,WAAO,MAAM;AACXA,MAAAA,QAAQ,GAAG,IAAX;AACAL,MAAAA,OAAO,CAACM,MAAR;AACD,KAHD;;AAKA,aAASJ,oBAAT,CAA8BK,KAA9B,EAA+C;AAC7CC,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CF,KAA1C;;AACA,UAAI,CAACF,QAAL,EAAe;AACbN,QAAAA,WAAW,CAACQ,KAAD,CAAX;AACD;AACF;AACF,GAfQ,EAeN,EAfM,CAAT;AAgBA,SAAO;AAAET,IAAAA;AAAF,GAAP;AACD,CAnBM","sourcesContent":["import { useEffect, useState } from 'react';\nimport { AppState, Plugins } from '@capacitor/core';\n\nconst { App } = Plugins;\nconst {Storage} = Plugins;\n\nconst initialState = {\n  isActive: true,\n}\n\nexport const useAppState = () => {\n  const [appState, setAppState] = useState(initialState)\n  useEffect(() => {\n    const handler = App.addListener('appStateChange', handleAppStateChange);\n    App.getState().then(handleAppStateChange);\n    let canceled = false;\n    return () => {\n      canceled = true;\n      handler.remove();\n    }\n\n    function handleAppStateChange(state: AppState) {\n      console.log('useAppState - state change', state);\n      if (!canceled) {\n        setAppState(state);\n      }\n    }\n  }, [])\n  return { appState };\n};\n"]},"metadata":{},"sourceType":"module"}