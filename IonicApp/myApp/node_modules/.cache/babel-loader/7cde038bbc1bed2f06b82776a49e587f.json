{"ast":null,"code":"var _jsxFileName = \"D:\\\\PDM\\\\IonicApp\\\\myApp\\\\src\\\\todo\\\\TrainProvider.tsx\";\nimport React, { useCallback, useEffect, useReducer } from 'react';\nimport { getLogger } from '../core';\nimport { createItem, getTrains, updateTrain } from './TrainsAPI';\nconst log = getLogger('ItemProvider');\nconst initialState = {\n  fetching: false,\n  buying: false\n};\nconst FETCH_ITEMS_STARTED = 'FETCH_ITEMS_STARTED';\nconst FETCH_ITEMS_SUCCEEDED = 'FETCH_ITEMS_SUCCEEDED';\nconst FETCH_ITEMS_FAILED = 'FETCH_ITEMS_FAILED';\nconst SAVE_ITEM_STARTED = 'SAVE_ITEM_STARTED';\nconst SAVE_ITEM_SUCCEEDED = 'SAVE_ITEM_SUCCEEDED';\nconst SAVE_ITEM_FAILED = 'SAVE_ITEM_FAILED';\n\nconst reducer = (state, {\n  type,\n  payload\n}) => {\n  switch (type) {\n    case FETCH_ITEMS_STARTED:\n      return { ...state,\n        fetching: true,\n        fetchingError: null\n      };\n\n    case FETCH_ITEMS_SUCCEEDED:\n      return { ...state,\n        items: payload.items,\n        fetching: false\n      };\n\n    case FETCH_ITEMS_FAILED:\n      return { ...state,\n        fetchingError: payload.error,\n        fetching: false\n      };\n\n    case SAVE_ITEM_STARTED:\n      return { ...state,\n        buyingError: null,\n        buying: true\n      };\n\n    case SAVE_ITEM_SUCCEEDED:\n      const items = [...(state.trains || [])];\n      const item = payload.item;\n      const index = items.findIndex(it => it.id === item.id);\n\n      if (index === -1) {\n        items.splice(0, 0, item);\n      } else {\n        items[index] = item;\n      }\n\n      return { ...state,\n        items,\n        buying: false\n      };\n\n    case SAVE_ITEM_FAILED:\n      return { ...state,\n        buyingError: payload.error,\n        buying: false\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const TrainContext = React.createContext(initialState);\nexport const TrainProvider = ({\n  children\n}) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const {\n    items,\n    fetching,\n    fetchingError,\n    saving,\n    savingError\n  } = state;\n  useEffect(getItemsEffect, []);\n  const saveItem = useCallback(saveItemCallback, []);\n  const value = {\n    items,\n    fetching,\n    fetchingError,\n    saving,\n    savingError,\n    saveItem\n  };\n  log('returns');\n  return /*#__PURE__*/React.createElement(TrainContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, children);\n\n  function getItemsEffect() {\n    let canceled = false;\n    fetchItems();\n    return () => {\n      canceled = true;\n    };\n\n    async function fetchItems() {\n      try {\n        log('fetchItems started');\n        dispatch({\n          type: FETCH_ITEMS_STARTED\n        });\n        const items = await getTrains();\n        log('fetchItems succeeded');\n\n        if (!canceled) {\n          dispatch({\n            type: FETCH_ITEMS_SUCCEEDED,\n            payload: {\n              items\n            }\n          });\n        }\n      } catch (error) {\n        log('fetchItems failed');\n        dispatch({\n          type: FETCH_ITEMS_FAILED,\n          payload: {\n            error\n          }\n        });\n      }\n    }\n  }\n\n  async function saveItemCallback(item) {\n    try {\n      log('saveItem started');\n      dispatch({\n        type: SAVE_ITEM_STARTED\n      });\n      const savedItem = await (item.id ? updateTrain(item) : createItem(item));\n      log('saveItem succeeded');\n      dispatch({\n        type: SAVE_ITEM_SUCCEEDED,\n        payload: {\n          item: savedItem\n        }\n      });\n    } catch (error) {\n      log('saveItem failed');\n      dispatch({\n        type: SAVE_ITEM_FAILED,\n        payload: {\n          error\n        }\n      });\n    }\n  }\n};","map":{"version":3,"sources":["D:/PDM/IonicApp/myApp/src/todo/TrainProvider.tsx"],"names":["React","useCallback","useEffect","useReducer","getLogger","createItem","getTrains","updateTrain","log","initialState","fetching","buying","FETCH_ITEMS_STARTED","FETCH_ITEMS_SUCCEEDED","FETCH_ITEMS_FAILED","SAVE_ITEM_STARTED","SAVE_ITEM_SUCCEEDED","SAVE_ITEM_FAILED","reducer","state","type","payload","fetchingError","items","error","buyingError","trains","item","index","findIndex","it","id","splice","TrainContext","createContext","TrainProvider","children","dispatch","saving","savingError","getItemsEffect","saveItem","saveItemCallback","value","canceled","fetchItems","savedItem"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useReducer } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { getLogger } from '../core';\r\nimport { TrainProps } from './TrainProps';\r\nimport { createItem, getTrains, updateTrain } from './TrainsAPI';\r\n\r\nconst log = getLogger('ItemProvider');\r\n\r\ntype SaveItemFn = (item: TrainProps) => Promise<any>;\r\n\r\nexport interface TrainState {\r\n    trains?: TrainProps[],\r\n    fetching: boolean,\r\n    fetchingError?: Error | null,\r\n    buying: boolean,\r\n    buyingError?: Error | null,\r\n    buyTicket?: SaveItemFn,\r\n}\r\n\r\ninterface ActionProps {\r\n    type: string,\r\n    payload?: any,\r\n}\r\n\r\nconst initialState: TrainState = {\r\n    fetching: false,\r\n    buying: false,\r\n};\r\n\r\nconst FETCH_ITEMS_STARTED = 'FETCH_ITEMS_STARTED';\r\nconst FETCH_ITEMS_SUCCEEDED = 'FETCH_ITEMS_SUCCEEDED';\r\nconst FETCH_ITEMS_FAILED = 'FETCH_ITEMS_FAILED';\r\nconst SAVE_ITEM_STARTED = 'SAVE_ITEM_STARTED';\r\nconst SAVE_ITEM_SUCCEEDED = 'SAVE_ITEM_SUCCEEDED';\r\nconst SAVE_ITEM_FAILED = 'SAVE_ITEM_FAILED';\r\n\r\nconst reducer: (state: TrainState, action: ActionProps) => TrainState =\r\n    (state, { type, payload }) => {\r\n        switch(type) {\r\n            case FETCH_ITEMS_STARTED:\r\n                return { ...state, fetching: true, fetchingError: null };\r\n            case FETCH_ITEMS_SUCCEEDED:\r\n                return { ...state, items: payload.items, fetching: false };\r\n            case FETCH_ITEMS_FAILED:\r\n                return { ...state, fetchingError: payload.error, fetching: false };\r\n            case SAVE_ITEM_STARTED:\r\n                return { ...state, buyingError: null, buying: true };\r\n            case SAVE_ITEM_SUCCEEDED:\r\n                const items = [...(state.trains || [])];\r\n                const item = payload.item;\r\n                const index = items.findIndex(it => it.id === item.id);\r\n                if (index === -1) {\r\n                    items.splice(0, 0, item);\r\n                } else {\r\n                    items[index] = item;\r\n                }\r\n                return { ...state,  items, buying: false };\r\n            case SAVE_ITEM_FAILED:\r\n                return { ...state, buyingError: payload.error, buying: false };\r\n            default:\r\n                return state;\r\n        }\r\n    };\r\n\r\nexport const TrainContext = React.createContext<TrainState>(initialState);\r\n\r\ninterface ItemProviderProps {\r\n    children: PropTypes.ReactNodeLike,\r\n}\r\n\r\nexport const TrainProvider: React.FC<ItemProviderProps> = ({ children }) => {\r\n    const [state, dispatch] = useReducer(reducer, initialState);\r\n    const { items, fetching, fetchingError, saving, savingError } = state;\r\n    useEffect(getItemsEffect, []);\r\n    const saveItem = useCallback<SaveItemFn>(saveItemCallback, []);\r\n    const value = { items, fetching, fetchingError, saving, savingError, saveItem };\r\n    log('returns');\r\n    return (\r\n        <TrainContext.Provider value={value}>\r\n            {children}\r\n        </TrainContext.Provider>\r\n    );\r\n\r\n    function getItemsEffect() {\r\n        let canceled = false;\r\n        fetchItems();\r\n        return () => {\r\n            canceled = true;\r\n        }\r\n\r\n        async function fetchItems() {\r\n            try {\r\n                log('fetchItems started');\r\n                dispatch({ type: FETCH_ITEMS_STARTED });\r\n                const items = await getTrains();\r\n                log('fetchItems succeeded');\r\n                if (!canceled) {\r\n                    dispatch({ type: FETCH_ITEMS_SUCCEEDED, payload: { items } });\r\n                }\r\n            } catch (error) {\r\n                log('fetchItems failed');\r\n                dispatch({ type: FETCH_ITEMS_FAILED, payload: { error } });\r\n            }\r\n        }\r\n    }\r\n\r\n    async function saveItemCallback(item: TrainProps) {\r\n        try {\r\n            log('saveItem started');\r\n            dispatch({ type: SAVE_ITEM_STARTED });\r\n            const savedItem = await (item.id ? updateTrain(item) : createItem(item));\r\n            log('saveItem succeeded');\r\n            dispatch({ type: SAVE_ITEM_SUCCEEDED, payload: { item: savedItem } });\r\n        } catch (error) {\r\n            log('saveItem failed');\r\n            dispatch({ type: SAVE_ITEM_FAILED, payload: { error } });\r\n        }\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}