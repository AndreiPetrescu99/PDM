{"ast":null,"code":"import { getLogger } from \"../core\";\nimport { useEffect, useState } from \"react\";\nimport { getTrains } from \"./TrainsAPI\";\nconst log = getLogger('useTrains');\nexport const useTrains = () => {\n  const [state, setState] = useState({\n    trains: undefined,\n    fetching: false,\n    fetchingError: undefined\n  });\n  const {\n    trains,\n    fetching,\n    fetchingError\n  } = state;\n\n  const changeSeats = () => {\n    log(\"changeSeats - TODO\");\n  };\n\n  useEffect(getTrainsEffect, []);\n  log(\"Returns...\");\n  return {\n    trains,\n    fetching,\n    fetchingError,\n    changeSeats\n  };\n\n  function getTrainsEffect() {\n    let canceled = false;\n    fetchTrains();\n    return () => {\n      canceled = true;\n    };\n\n    async function fetchTrains() {\n      try {\n        log('Trying to fetch trains...');\n        setState({ ...state,\n          fetching: true\n        });\n        const trains = await getTrains();\n        log(\"Yaay trains fetched\");\n\n        if (!canceled) {\n          setState({ ...state,\n            trains,\n            fetching: false\n          });\n        }\n      } catch (error) {\n        log(\"Error sorry (not trains got)\");\n        setState({ ...state,\n          fetchingError: error,\n          fetching: false\n        });\n      }\n    }\n  }\n};","map":{"version":3,"sources":["D:/PDM/IonicApp/myApp/src/todo/useTrains.tsx"],"names":["getLogger","useEffect","useState","getTrains","log","useTrains","state","setState","trains","undefined","fetching","fetchingError","changeSeats","getTrainsEffect","canceled","fetchTrains","error"],"mappings":"AAAA,SAAQA,SAAR,QAAwB,SAAxB;AACA,SAAQC,SAAR,EAAmBC,QAAnB,QAAkC,OAAlC;AAGA,SAAQC,SAAR,QAAwB,aAAxB;AAGA,MAAMC,GAAG,GAAGJ,SAAS,CAAC,WAAD,CAArB;AAYA,OAAO,MAAMK,SAA4B,GAAG,MAAM;AAC9C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAc;AAC5CM,IAAAA,MAAM,EAAEC,SADoC;AAE5CC,IAAAA,QAAQ,EAAE,KAFkC;AAG5CC,IAAAA,aAAa,EAAEF;AAH6B,GAAd,CAAlC;AAMA,QAAM;AAACD,IAAAA,MAAD;AAASE,IAAAA,QAAT;AAAmBC,IAAAA;AAAnB,MAAoCL,KAA1C;;AAEA,QAAMM,WAAW,GAAG,MAAM;AACtBR,IAAAA,GAAG,CAAC,oBAAD,CAAH;AACH,GAFD;;AAGAH,EAAAA,SAAS,CAACY,eAAD,EAAkB,EAAlB,CAAT;AAEAT,EAAAA,GAAG,CAAC,YAAD,CAAH;AACA,SAAM;AACFI,IAAAA,MADE;AAEFE,IAAAA,QAFE;AAGFC,IAAAA,aAHE;AAIFC,IAAAA;AAJE,GAAN;;AAOA,WAASC,eAAT,GAA0B;AACtB,QAAIC,QAAQ,GAAG,KAAf;AACAC,IAAAA,WAAW;AAEX,WAAO,MAAM;AACTD,MAAAA,QAAQ,GAAG,IAAX;AACH,KAFD;;AAIA,mBAAeC,WAAf,GAA4B;AACxB,UAAG;AACCX,QAAAA,GAAG,CAAC,2BAAD,CAAH;AACAG,QAAAA,QAAQ,CAAC,EAAC,GAAGD,KAAJ;AAAWI,UAAAA,QAAQ,EAAE;AAArB,SAAD,CAAR;AACA,cAAMF,MAAM,GAAG,MAAML,SAAS,EAA9B;AACAC,QAAAA,GAAG,CAAC,qBAAD,CAAH;;AACA,YAAG,CAACU,QAAJ,EAAa;AACTP,UAAAA,QAAQ,CAAC,EAAC,GAAGD,KAAJ;AAAWE,YAAAA,MAAX;AAAmBE,YAAAA,QAAQ,EAAE;AAA7B,WAAD,CAAR;AACH;AACJ,OARD,CAQC,OAAOM,KAAP,EAAa;AACVZ,QAAAA,GAAG,CAAC,8BAAD,CAAH;AACAG,QAAAA,QAAQ,CAAC,EAAC,GAAGD,KAAJ;AAAWK,UAAAA,aAAa,EAAEK,KAA1B;AAAiCN,UAAAA,QAAQ,EAAE;AAA3C,SAAD,CAAR;AACH;AACJ;AACJ;AACJ,CA7CM","sourcesContent":["import {getLogger} from \"../core\";\r\nimport {useEffect, useState} from \"react\";\r\nimport {TrainProps} from \"./TrainProps\";\r\nimport {isNullOrUndefined} from \"util\";\r\nimport {getTrains} from \"./TrainsAPI\";\r\n\r\n\r\nconst log = getLogger('useTrains');\r\n\r\nexport interface TrainsState{\r\n    trains?: TrainProps[];\r\n    fetching: boolean;\r\n    fetchingError?: Error;\r\n}\r\n\r\nexport interface TrainsProps extends TrainsState{\r\n    changeSeats: () => void;\r\n}\r\n\r\nexport const useTrains: () => TrainsProps = () => {\r\n    const [state, setState] = useState<TrainsState>({\r\n        trains: undefined,\r\n        fetching: false,\r\n        fetchingError: undefined,\r\n    });\r\n\r\n    const {trains, fetching, fetchingError} = state;\r\n\r\n    const changeSeats = () => {\r\n        log(\"changeSeats - TODO\");\r\n    }\r\n    useEffect(getTrainsEffect, []);\r\n\r\n    log(\"Returns...\")\r\n    return{\r\n        trains,\r\n        fetching,\r\n        fetchingError,\r\n        changeSeats,\r\n    };\r\n\r\n    function getTrainsEffect(){\r\n        let canceled = false;\r\n        fetchTrains();\r\n\r\n        return () => {\r\n            canceled = true;\r\n        }\r\n\r\n        async function fetchTrains(){\r\n            try{\r\n                log('Trying to fetch trains...');\r\n                setState({...state, fetching: true});\r\n                const trains = await getTrains();\r\n                log(\"Yaay trains fetched\");\r\n                if(!canceled){\r\n                    setState({...state, trains, fetching: false});\r\n                }\r\n            }catch (error){\r\n                log(\"Error sorry (not trains got)\");\r\n                setState({...state, fetchingError: error, fetching: false});\r\n            }\r\n        }\r\n    }\r\n};"]},"metadata":{},"sourceType":"module"}