{"ast":null,"code":"import { authConfig, baseUrl, getLogger, withLogs } from \"../core\";\nimport axios from 'axios';\nconst log = getLogger('trainsAPI');\nconst trainURL = `http://${baseUrl}/api/train`;\nlet crPage = 1;\nconst trainURLPage = `${trainURL}/page/${crPage}`;\nexport const getTrains = token => {\n  crPage = crPage + 1;\n  log(trainURLPage);\n  return withLogs(axios.get(trainURLPage, authConfig(token)), 'getItems');\n};\nexport const updateTrain = (token, train) => {\n  return withLogs(axios.put(`${trainURL}/${train._id}`, train, authConfig(token)), 'updateTrain');\n};\nexport const createItem = (token, train) => {\n  return withLogs(axios.post(trainURL, train, authConfig(token)), 'createItem');\n};\nexport const newWebSocket = onMessage => {\n  const ws = new WebSocket(`ws://${baseUrl}`);\n\n  ws.onopen = () => {\n    log('WebSocket onOpen');\n  };\n\n  ws.onclose = () => {\n    log('WebSocket onClose');\n  };\n\n  ws.onerror = () => {\n    log('WebSocket onError');\n  };\n\n  ws.onmessage = messageEvent => {\n    log('WebSocket onMessage');\n    onMessage(JSON.parse(messageEvent.data));\n  };\n\n  return () => {\n    ws.close();\n  };\n};","map":{"version":3,"sources":["D:/PDM/IonicApp/myApp/src/todo/TrainsAPI.tsx"],"names":["authConfig","baseUrl","getLogger","withLogs","axios","log","trainURL","crPage","trainURLPage","getTrains","token","get","updateTrain","train","put","_id","createItem","post","newWebSocket","onMessage","ws","WebSocket","onopen","onclose","onerror","onmessage","messageEvent","JSON","parse","data","close"],"mappings":"AAAA,SAAQA,UAAR,EAAoBC,OAApB,EAA6BC,SAA7B,EAAwCC,QAAxC,QAAyD,SAAzD;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AAGA,MAAMC,GAAG,GAAGH,SAAS,CAAC,WAAD,CAArB;AACA,MAAMI,QAAQ,GAAI,UAASL,OAAQ,YAAnC;AACA,IAAIM,MAAM,GAAG,CAAb;AACA,MAAMC,YAAY,GAAG,GAAEF,QAAS,SAAQC,MAAO,EAA/C;AAGA,OAAO,MAAME,SAAmD,GAAGC,KAAK,IAAG;AACvEH,EAAAA,MAAM,GAAGA,MAAM,GAAG,CAAlB;AACAF,EAAAA,GAAG,CAACG,YAAD,CAAH;AACA,SAAOL,QAAQ,CAACC,KAAK,CAACO,GAAN,CAAUH,YAAV,EAAwBR,UAAU,CAACU,KAAD,CAAlC,CAAD,EAA6C,UAA7C,CAAf;AACH,CAJM;AAMP,OAAO,MAAME,WAAwE,GAAG,CAACF,KAAD,EAAQG,KAAR,KAAkB;AACtG,SAAOV,QAAQ,CAACC,KAAK,CAACU,GAAN,CAAW,GAAER,QAAS,IAAGO,KAAK,CAACE,GAAI,EAAnC,EAAsCF,KAAtC,EAA6Cb,UAAU,CAACU,KAAD,CAAvD,CAAD,EAAkE,aAAlE,CAAf;AACH,CAFM;AAIP,OAAO,MAAMM,UAAuE,GAAG,CAACN,KAAD,EAAQG,KAAR,KAAkB;AACrG,SAAOV,QAAQ,CAACC,KAAK,CAACa,IAAN,CAAWX,QAAX,EAAqBO,KAArB,EAA4Bb,UAAU,CAACU,KAAD,CAAtC,CAAD,EAAiD,YAAjD,CAAf;AACH,CAFM;AAWP,OAAO,MAAMQ,YAAY,GAAIC,SAAD,IAA4C;AACpE,QAAMC,EAAE,GAAG,IAAIC,SAAJ,CAAe,QAAOpB,OAAQ,EAA9B,CAAX;;AACAmB,EAAAA,EAAE,CAACE,MAAH,GAAY,MAAK;AACbjB,IAAAA,GAAG,CAAC,kBAAD,CAAH;AACH,GAFD;;AAGAe,EAAAA,EAAE,CAACG,OAAH,GAAa,MAAK;AACdlB,IAAAA,GAAG,CAAC,mBAAD,CAAH;AACH,GAFD;;AAGAe,EAAAA,EAAE,CAACI,OAAH,GAAa,MAAK;AACdnB,IAAAA,GAAG,CAAC,mBAAD,CAAH;AACH,GAFD;;AAGAe,EAAAA,EAAE,CAACK,SAAH,GAAeC,YAAY,IAAG;AAC1BrB,IAAAA,GAAG,CAAC,qBAAD,CAAH;AACAc,IAAAA,SAAS,CAACQ,IAAI,CAACC,KAAL,CAAWF,YAAY,CAACG,IAAxB,CAAD,CAAT;AACH,GAHD;;AAIA,SAAO,MAAM;AACTT,IAAAA,EAAE,CAACU,KAAH;AACH,GAFD;AAGH,CAlBM","sourcesContent":["import {authConfig, baseUrl, getLogger, withLogs  } from \"../core\";\r\nimport {TrainProps} from \"./TrainProps\";\r\nimport axios from 'axios';\r\n\r\n\r\nconst log = getLogger('trainsAPI');\r\nconst trainURL = `http://${baseUrl}/api/train`;\r\nlet crPage = 1;\r\nconst trainURLPage =`${trainURL}/page/${crPage}`;\r\n\r\n\r\nexport const getTrains: (token: string) => Promise<TrainProps[]> = token =>{\r\n    crPage = crPage + 1;\r\n    log(trainURLPage);\r\n    return withLogs(axios.get(trainURLPage, authConfig(token)), 'getItems');\r\n};\r\n\r\nexport const updateTrain: (token: string, train: TrainProps) => Promise<TrainProps[]> = (token, train) => {\r\n    return withLogs(axios.put(`${trainURL}/${train._id}`, train, authConfig(token)), 'updateTrain');\r\n};\r\n\r\nexport const createItem: (token: string, train: TrainProps) => Promise<TrainProps[]> = (token, train) => {\r\n    return withLogs(axios.post(trainURL, train, authConfig(token)), 'createItem');\r\n}\r\n\r\ninterface MessageData{\r\n    event: string;\r\n    payload:{\r\n        train: TrainProps\r\n    };\r\n}\r\n\r\nexport const newWebSocket = (onMessage: (data: MessageData) => void) => {\r\n    const ws = new WebSocket(`ws://${baseUrl}`);\r\n    ws.onopen = () =>{\r\n        log('WebSocket onOpen');\r\n    }\r\n    ws.onclose = () =>{\r\n        log('WebSocket onClose');\r\n    }\r\n    ws.onerror = () =>{\r\n        log('WebSocket onError');\r\n    }\r\n    ws.onmessage = messageEvent =>{\r\n        log('WebSocket onMessage');\r\n        onMessage(JSON.parse(messageEvent.data));\r\n    };\r\n    return () => {\r\n        ws.close();\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}