{"ast":null,"code":"var _jsxFileName = \"D:\\\\PDM\\\\IonicApp\\\\myApp\\\\src\\\\todo\\\\TrainProvider.tsx\";\nimport { getLogger } from \"../core\";\nimport React, { useCallback, useEffect, useReducer } from \"react\";\nimport { getTrains, updateTrain } from \"./TrainsAPI\";\nconst log = getLogger('useTrains');\nconst initialState = {\n  fetching: false,\n  buying: false\n};\nconst FETCH_TRAINS_STARTED = 'FETCH_TRAINS_STARTED';\nconst FETCH_TRAINS_SUCCEDED = 'FETCH_TRAINS_SUCCEDED';\nconst FETCH_TRAINS_FAILED = 'FETCH_TRAINS_FAILED';\nconst BUYING_TICKET_STARTED = 'BUYING_TICKET_STARTED';\nconst BUYING_TICKET_SUCCEDED = 'BUYING_TICKET_SUCCEDED';\nconst BUYING_TICKET_FAILED = 'BUYING_TICKET_FAILED';\n\nconst reducer = (state, {\n  type,\n  payload\n}) => {\n  switch (type) {\n    case FETCH_TRAINS_STARTED:\n      return { ...state,\n        fetching: true\n      };\n\n    case FETCH_TRAINS_SUCCEDED:\n      return { ...state,\n        trains: payload.trains,\n        fetching: false\n      };\n\n    case FETCH_TRAINS_FAILED:\n      return { ...state,\n        fetchingError: payload.error,\n        fetching: false\n      };\n\n    case BUYING_TICKET_STARTED:\n      return { ...state,\n        buyingError: null,\n        buying: true\n      };\n\n    case BUYING_TICKET_SUCCEDED:\n      const trains = [...(state.trains || [])];\n      const train = payload.train;\n      const index = trains.findIndex(it => it.id === train.id);\n\n      if (index === -1) {\n        trains.splice(0, 0, train);\n      } else {\n        trains[index] = train;\n      }\n\n      return { ...state,\n        trains,\n        buying: false\n      };\n\n    case BUYING_TICKET_FAILED:\n      return { ...state,\n        buyingError: payload.error,\n        buying: false\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const TrainContext = React.createContext(initialState);\nexport const TrainProvider = ({\n  children\n}) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const {\n    trains,\n    fetching,\n    fetchingError,\n    buying,\n    buyingError\n  } = state;\n  useEffect(getTrainsEffect, []);\n  const buyTicket = useCallback(buyTicketCallback, []);\n  const value = {\n    trains,\n    fetching,\n    fetchingError,\n    buying,\n    buyingError,\n    buyTicket\n  };\n  log('return');\n  return /*#__PURE__*/React.createElement(TrainContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, children);\n\n  function getTrainsEffect() {\n    let canceled = false;\n    fetchTrains();\n    return () => {\n      canceled = true;\n    };\n\n    async function fetchTrains() {\n      try {\n        log('Trying to fetch trains...');\n        dispatch({\n          type: FETCH_TRAINS_STARTED\n        });\n        const trains = await getTrains();\n        log(\"Yaay trains fetched\");\n\n        if (!canceled) {\n          dispatch({\n            type: FETCH_TRAINS_SUCCEDED,\n            payload: {\n              trains\n            }\n          });\n        }\n      } catch (error) {\n        log(\"Error sorry (not trains got)\");\n        dispatch({\n          type: FETCH_TRAINS_FAILED,\n          payload: {\n            error\n          }\n        });\n      }\n    }\n  }\n\n  async function buyTicketCallback(train) {\n    try {\n      log('Buying ticket started (pls God)');\n      dispatch({\n        type: BUYING_TICKET_STARTED\n      });\n      const updatedTrain = await (train.id ? updateTrain(train) : updateTrain(train));\n      log(\"Ticket bought...\");\n      dispatch({\n        type: BUYING_TICKET_FAILED,\n        payload: {\n          train: updatedTrain\n        }\n      });\n    } catch (error) {\n      log(\"Failed buying ticket (Sad face)\");\n      dispatch({\n        type: BUYING_TICKET_FAILED,\n        payload: {\n          error\n        }\n      });\n    }\n  }\n};","map":{"version":3,"sources":["D:/PDM/IonicApp/myApp/src/todo/TrainProvider.tsx"],"names":["getLogger","React","useCallback","useEffect","useReducer","getTrains","updateTrain","log","initialState","fetching","buying","FETCH_TRAINS_STARTED","FETCH_TRAINS_SUCCEDED","FETCH_TRAINS_FAILED","BUYING_TICKET_STARTED","BUYING_TICKET_SUCCEDED","BUYING_TICKET_FAILED","reducer","state","type","payload","trains","fetchingError","error","buyingError","train","index","findIndex","it","id","splice","TrainContext","createContext","TrainProvider","children","dispatch","getTrainsEffect","buyTicket","buyTicketCallback","value","canceled","fetchTrains","updatedTrain"],"mappings":"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","sourcesContent":["import {getLogger} from \"../core\";\r\nimport React, {useCallback, useEffect, useReducer, useState} from \"react\";\r\nimport {TrainProps} from \"./TrainProps\";\r\nimport PropTypes from 'prop-types';\r\nimport {getTrains, updateTrain} from \"./TrainsAPI\";\r\n\r\n\r\nconst log = getLogger('useTrains');\r\n\r\ntype  BuyTicketFn = (train: TrainProps) => Promise<any>;\r\n\r\nexport interface TrainsState{\r\n    trains?: TrainProps[],\r\n    fetching: boolean,\r\n    fetchingError?: Error|null,\r\n    buying: boolean,\r\n    buyingError?: Error | null,\r\n    buyTicket?: BuyTicketFn,\r\n}\r\n\r\n\r\ninterface ActionProps{\r\n    type:string,\r\n    payload?: any,\r\n}\r\n\r\nconst initialState: TrainsState = {\r\n    fetching: false,\r\n    buying: false,\r\n}\r\n\r\nconst FETCH_TRAINS_STARTED = 'FETCH_TRAINS_STARTED';\r\nconst FETCH_TRAINS_SUCCEDED = 'FETCH_TRAINS_SUCCEDED';\r\nconst FETCH_TRAINS_FAILED = 'FETCH_TRAINS_FAILED';\r\nconst BUYING_TICKET_STARTED = 'BUYING_TICKET_STARTED';\r\nconst BUYING_TICKET_SUCCEDED = 'BUYING_TICKET_SUCCEDED';\r\nconst BUYING_TICKET_FAILED = 'BUYING_TICKET_FAILED';\r\n\r\nconst reducer: (state: TrainsState, action: ActionProps) => TrainsState =\r\n    (state, {type, payload}) =>{\r\n        switch (type){\r\n            case FETCH_TRAINS_STARTED:\r\n                return{...state, fetching: true};\r\n            case FETCH_TRAINS_SUCCEDED:\r\n                return {...state, trains: payload.trains, fetching: false};\r\n            case FETCH_TRAINS_FAILED:\r\n                return {...state, fetchingError:payload.error, fetching: false};\r\n            case BUYING_TICKET_STARTED:\r\n                return {...state, buyingError: null, buying:true};\r\n            case BUYING_TICKET_SUCCEDED:\r\n                const trains = [...(state.trains || [])];\r\n                const train = payload.train;\r\n                const index = trains.findIndex(it => it.id === train.id);\r\n                if(index === -1){\r\n                    trains.splice(0, 0, train);\r\n                }else {\r\n                    trains[index] = train;\r\n                }\r\n                return {...state, trains, buying: false};\r\n            case BUYING_TICKET_FAILED:\r\n                return {...state, buyingError: payload.error, buying:false};\r\n            default:\r\n                return state;\r\n        }\r\n    };\r\n\r\nexport const TrainContext = React.createContext<TrainsState>(initialState);\r\n\r\ninterface TrainProviderProps{\r\n    children: PropTypes.ReactNodeLike,\r\n}\r\n\r\nexport const TrainProvider: React.FC<TrainProviderProps> = ({children}) =>{\r\n    const [state, dispatch] = useReducer(reducer, initialState);\r\n    const {trains, fetching, fetchingError, buying, buyingError} = state;\r\n    useEffect(getTrainsEffect, []);\r\n\r\n    const buyTicket = useCallback<BuyTicketFn>(buyTicketCallback, []);\r\n    const value = {trains, fetching, fetchingError, buying, buyingError, buyTicket};\r\n    log('return');\r\n    return(\r\n        <TrainContext.Provider value={value}>\r\n            {children}\r\n        </TrainContext.Provider>\r\n    )\r\n\r\n    function getTrainsEffect() {\r\n        let canceled = false;\r\n        fetchTrains();\r\n        return () => {\r\n            canceled = true;\r\n        }\r\n\r\n        async function fetchTrains() {\r\n            try {\r\n                log('Trying to fetch trains...');\r\n                dispatch({type: FETCH_TRAINS_STARTED});\r\n                const trains = await getTrains();\r\n                log(\"Yaay trains fetched\");\r\n                if (!canceled) {\r\n                    dispatch({type: FETCH_TRAINS_SUCCEDED, payload: {trains}});\r\n                }\r\n            } catch (error) {\r\n                log(\"Error sorry (not trains got)\");\r\n                dispatch({type: FETCH_TRAINS_FAILED, payload: {error}});\r\n            }\r\n        }\r\n    }\r\n\r\n    async function buyTicketCallback(train: TrainProps){\r\n        try{\r\n            log('Buying ticket started (pls God)');\r\n            dispatch({type: BUYING_TICKET_STARTED});\r\n            const updatedTrain = await (train.id ? updateTrain(train) : updateTrain(train));\r\n            log(\"Ticket bought...\");\r\n            dispatch({type: BUYING_TICKET_FAILED, payload:{train:updatedTrain}});\r\n        }catch (error){\r\n            log(\"Failed buying ticket (Sad face)\");\r\n            dispatch({type: BUYING_TICKET_FAILED, payload:{error}});\r\n        }\r\n    }\r\n};\r\n\r\n"]},"metadata":{},"sourceType":"module"}