{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport { Plugins } from '@capacitor/core';\nimport { useBackgroundTask } from \"./useBackgroundTask\";\nconst {\n  Network\n} = Plugins;\nconst initialState = {\n  connected: false,\n  connectionType: 'unknown'\n};\n\nfunction buildTrainProps(train) {\n  return train;\n}\n\nexport const useNetwork = () => {\n  const [networkStatus, setNetworkStatus] = useState(initialState);\n  useEffect(() => {\n    const handler = Network.addListener('networkStatusChange', handleNetworkStatusChange);\n    Network.getStatus().then(handleNetworkStatusChange);\n    let canceled = false;\n    return () => {\n      canceled = true;\n      handler.remove();\n    };\n\n    function handleNetworkStatusChange(status) {\n      console.log('useNetwork - status change', status);\n\n      if (!canceled) {\n        if (status.connected === true) {\n          useBackgroundTask(() => new Promise(resolve => {\n            console.log(\"Trying to send data\");\n\n            resolve = async () => {\n              let items = [];\n              const {\n                Storage\n              } = Plugins;\n              const {\n                keys\n              } = await Storage.keys();\n\n              for (let i = 0; i < keys.length; i++) {\n                if (keys[i].startsWith(\"Bought:\")) {\n                  const res = await Storage.get({\n                    key: keys[i]\n                  });\n\n                  if (res.value) {\n                    items.push(buildTrainProps(JSON.parse(res.value)));\n                  }\n                }\n              }\n            };\n\n            resolve();\n          }));\n        }\n\n        setNetworkStatus(status);\n      }\n    }\n  }, []);\n  return {\n    networkStatus\n  };\n};","map":{"version":3,"sources":["D:/PDM/IonicApp/myApp/src/network/useNetwork.tsx"],"names":["useEffect","useState","Plugins","useBackgroundTask","Network","initialState","connected","connectionType","buildTrainProps","train","useNetwork","networkStatus","setNetworkStatus","handler","addListener","handleNetworkStatusChange","getStatus","then","canceled","remove","status","console","log","Promise","resolve","items","Storage","keys","i","length","startsWith","res","get","key","value","push","JSON","parse"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAAwBC,OAAxB,QAAuC,iBAAvC;AACA,SAAQC,iBAAR,QAAgC,qBAAhC;AAIA,MAAM;AAAEC,EAAAA;AAAF,IAAcF,OAApB;AAEA,MAAMG,YAAY,GAAG;AACnBC,EAAAA,SAAS,EAAE,KADQ;AAEnBC,EAAAA,cAAc,EAAE;AAFG,CAArB;;AAKA,SAASC,eAAT,CAAyBC,KAAzB,EAA2C;AACzC,SAAOA,KAAP;AACD;;AAED,OAAO,MAAMC,UAAU,GAAG,MAAM;AAC9B,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCX,QAAQ,CAACI,YAAD,CAAlD;AACAL,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMa,OAAO,GAAGT,OAAO,CAACU,WAAR,CAAoB,qBAApB,EAA2CC,yBAA3C,CAAhB;AACAX,IAAAA,OAAO,CAACY,SAAR,GAAoBC,IAApB,CAAyBF,yBAAzB;AACA,QAAIG,QAAQ,GAAG,KAAf;AACA,WAAO,MAAM;AACXA,MAAAA,QAAQ,GAAG,IAAX;AACAL,MAAAA,OAAO,CAACM,MAAR;AACD,KAHD;;AAKA,aAASJ,yBAAT,CAAmCK,MAAnC,EAA0D;AACxDC,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CF,MAA1C;;AACA,UAAI,CAACF,QAAL,EAAe;AACb,YAAGE,MAAM,CAACd,SAAP,KAAqB,IAAxB,EAA6B;AAC3BH,UAAAA,iBAAiB,CAAC,MAAM,IAAIoB,OAAJ,CAAYC,OAAO,IAAI;AAC7CH,YAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;;AACAE,YAAAA,OAAO,GAAG,YAAY;AACpB,kBAAIC,KAAK,GAAG,EAAZ;AACA,oBAAM;AAACC,gBAAAA;AAAD,kBAAYxB,OAAlB;AACA,oBAAM;AAACyB,gBAAAA;AAAD,kBAAS,MAAMD,OAAO,CAACC,IAAR,EAArB;;AACA,mBAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,IAAI,CAACE,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,oBAAID,IAAI,CAACC,CAAD,CAAJ,CAAQE,UAAR,CAAmB,SAAnB,CAAJ,EAAmC;AACjC,wBAAMC,GAAG,GAAG,MAAML,OAAO,CAACM,GAAR,CAAY;AAACC,oBAAAA,GAAG,EAAEN,IAAI,CAACC,CAAD;AAAV,mBAAZ,CAAlB;;AACA,sBAAIG,GAAG,CAACG,KAAR,EAAe;AACbT,oBAAAA,KAAK,CAACU,IAAN,CAAW3B,eAAe,CAAC4B,IAAI,CAACC,KAAL,CAAWN,GAAG,CAACG,KAAf,CAAD,CAA1B;AACD;AACF;AACF;AACF,aAZD;;AAaAV,YAAAA,OAAO;AACR,WAhBuB,CAAP,CAAjB;AAiBD;;AACDZ,QAAAA,gBAAgB,CAACQ,MAAD,CAAhB;AACD;AACF;AACF,GAlCQ,EAkCN,EAlCM,CAAT;AAmCA,SAAO;AAAET,IAAAA;AAAF,GAAP;AACD,CAtCM","sourcesContent":["import { useEffect, useState } from 'react';\nimport { NetworkStatus, Plugins } from '@capacitor/core';\nimport {useBackgroundTask} from \"./useBackgroundTask\";\nimport {TrainProps} from \"../todo/TrainProps\";\n\n\nconst { Network } = Plugins;\n\nconst initialState = {\n  connected: false,\n  connectionType: 'unknown',\n}\n\nfunction buildTrainProps(train: TrainProps){\n  return train;\n}\n\nexport const useNetwork = () => {\n  const [networkStatus, setNetworkStatus] = useState(initialState)\n  useEffect(() => {\n    const handler = Network.addListener('networkStatusChange', handleNetworkStatusChange);\n    Network.getStatus().then(handleNetworkStatusChange);\n    let canceled = false;\n    return () => {\n      canceled = true;\n      handler.remove();\n    }\n\n    function handleNetworkStatusChange(status: NetworkStatus) {\n      console.log('useNetwork - status change', status);\n      if (!canceled) {\n        if(status.connected === true){\n          useBackgroundTask(() => new Promise(resolve => {\n            console.log(\"Trying to send data\");\n            resolve = async () => {\n              let items = []\n              const {Storage} = Plugins;\n              const {keys} = await Storage.keys();\n              for (let i = 0; i < keys.length; i++) {\n                if (keys[i].startsWith(\"Bought:\")) {\n                  const res = await Storage.get({key: keys[i]});\n                  if (res.value) {\n                    items.push(buildTrainProps(JSON.parse(res.value)));\n                  }\n                }\n              }\n            }\n            resolve();\n          }));\n        }\n        setNetworkStatus(status);\n      }\n    }\n  }, [])\n  return { networkStatus };\n};\n"]},"metadata":{},"sourceType":"module"}