{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport { Plugins } from '@capacitor/core';\nconst {\n  Geolocation\n} = Plugins;\nexport const useMyLocation = () => {\n  const [state, setState] = useState({});\n  useEffect(watchMyLocation, []);\n  return state;\n\n  function watchMyLocation() {\n    let cancelled = false;\n    Geolocation.getCurrentPosition().then(position => updateMyPosition('current', position)).catch(error => updateMyPosition('current', undefined, error));\n    const callbackId = Geolocation.watchPosition({}, (position, error) => {\n      updateMyPosition('watch', position, error);\n    });\n    return () => {\n      cancelled = true;\n      Geolocation.clearWatch({\n        id: callbackId\n      });\n    };\n\n    function updateMyPosition(source, position, error = undefined) {\n      console.log(source, position, error);\n\n      if (!cancelled) {\n        setState({ ...state,\n          position: position || state.position,\n          error\n        });\n      }\n    }\n  }\n};","map":{"version":3,"sources":["D:/PDM/IonicApp/myApp/src/todo/useMyLocation.tsx"],"names":["useEffect","useState","Plugins","Geolocation","useMyLocation","state","setState","watchMyLocation","cancelled","getCurrentPosition","then","position","updateMyPosition","catch","error","undefined","callbackId","watchPosition","clearWatch","id","source","console","log"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAA8BC,OAA9B,QAA6C,iBAA7C;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAkBD,OAAxB;AAOA,OAAO,MAAME,aAAa,GAAG,MAAM;AAC/B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAa,EAAb,CAAlC;AACAD,EAAAA,SAAS,CAACO,eAAD,EAAkB,EAAlB,CAAT;AACA,SAAOF,KAAP;;AAEA,WAASE,eAAT,GAA2B;AACvB,QAAIC,SAAS,GAAG,KAAhB;AACAL,IAAAA,WAAW,CAACM,kBAAZ,GACKC,IADL,CACUC,QAAQ,IAAIC,gBAAgB,CAAC,SAAD,EAAYD,QAAZ,CADtC,EAEKE,KAFL,CAEWC,KAAK,IAAIF,gBAAgB,CAAC,SAAD,EAAWG,SAAX,EAAsBD,KAAtB,CAFpC;AAGA,UAAME,UAAU,GAAGb,WAAW,CAACc,aAAZ,CAA0B,EAA1B,EAA8B,CAACN,QAAD,EAAWG,KAAX,KAAqB;AAClEF,MAAAA,gBAAgB,CAAC,OAAD,EAAUD,QAAV,EAAoBG,KAApB,CAAhB;AACH,KAFkB,CAAnB;AAGA,WAAO,MAAM;AACTN,MAAAA,SAAS,GAAG,IAAZ;AACAL,MAAAA,WAAW,CAACe,UAAZ,CAAuB;AAAEC,QAAAA,EAAE,EAAEH;AAAN,OAAvB;AACH,KAHD;;AAKA,aAASJ,gBAAT,CAA0BQ,MAA1B,EAA0CT,QAA1C,EAA0EG,KAAU,GAAGC,SAAvF,EAAkG;AAC9FM,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ,EAAoBT,QAApB,EAA8BG,KAA9B;;AACA,UAAI,CAACN,SAAL,EAAgB;AACZF,QAAAA,QAAQ,CAAC,EAAE,GAAGD,KAAL;AAAYM,UAAAA,QAAQ,EAAEA,QAAQ,IAAIN,KAAK,CAACM,QAAxC;AAAkDG,UAAAA;AAAlD,SAAD,CAAR;AACH;AACJ;AACJ;AACJ,CAzBM","sourcesContent":["import { useEffect, useState } from 'react';\r\nimport { GeolocationPosition, Plugins } from '@capacitor/core';\r\n\r\nconst { Geolocation } = Plugins;\r\n\r\ninterface MyLocation {\r\n    position?: GeolocationPosition;\r\n    error?: Error;\r\n}\r\n\r\nexport const useMyLocation = () => {\r\n    const [state, setState] = useState<MyLocation>({});\r\n    useEffect(watchMyLocation, []);\r\n    return state;\r\n\r\n    function watchMyLocation() {\r\n        let cancelled = false;\r\n        Geolocation.getCurrentPosition()\r\n            .then(position => updateMyPosition('current', position))\r\n            .catch(error => updateMyPosition('current',undefined, error));\r\n        const callbackId = Geolocation.watchPosition({}, (position, error) => {\r\n            updateMyPosition('watch', position, error);\r\n        });\r\n        return () => {\r\n            cancelled = true;\r\n            Geolocation.clearWatch({ id: callbackId });\r\n        };\r\n\r\n        function updateMyPosition(source: string, position?: GeolocationPosition, error: any = undefined) {\r\n            console.log(source, position, error);\r\n            if (!cancelled) {\r\n                setState({ ...state, position: position || state.position, error });\r\n            }\r\n        }\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}