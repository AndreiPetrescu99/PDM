{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport { Plugins } from '@capacitor/core';\nconst {\n  BackgroundTask\n} = Plugins;\nconst {\n  Network\n} = Plugins;\nconst {\n  Storage\n} = Plugins;\nconst initialState = {\n  connected: false,\n  connectionType: 'unknown'\n};\n\nfunction buildTrainProps(train) {\n  return train;\n}\n\nexport const useNetwork = () => {\n  const [networkStatus, setNetworkStatus] = useState(initialState);\n  useEffect(() => {\n    const handler = Network.addListener('networkStatusChange', handleNetworkStatusChange);\n    Network.getStatus().then(handleNetworkStatusChange);\n    let canceled = false;\n    return () => {\n      canceled = true;\n      handler.remove();\n    };\n\n    function handleNetworkStatusChange(status) {\n      console.log('useNetwork - status change', status);\n\n      if (!canceled) {\n        if (status.connected) {\n          let taskId = BackgroundTask.beforeExit(async () => {\n            console.log('useBackgroundTask - executeTask started');\n            let items = [];\n            const {\n              Storage\n            } = Plugins; //const {token} = await Storage.get({key: \"token\"});\n\n            const {\n              keys\n            } = await Storage.keys();\n\n            for (let i = 0; i < keys.length; i++) {\n              if (keys[i].startsWith(\"Bought:\")) {\n                const res = await Storage.get({\n                  key: keys[i]\n                });\n\n                if (res.value) {\n                  items.push(buildTrainProps(JSON.parse(res.value)));\n                }\n              }\n            }\n\n            for (let i = 0; i < items.length; i++) {\n              const item = items[i];\n\n              try {//const savedItem = await (item._id ? updateTrain(token, item) : updateTrain(token, item));\n              } catch (error) {\n                console.log(\"error trying to update data for: \" + item);\n              }\n            }\n\n            console.log('useBackgroundTask - executeTask finished');\n            BackgroundTask.finish({\n              taskId\n            });\n          });\n        }\n\n        setNetworkStatus(status);\n      }\n    }\n  }, []);\n  return {\n    networkStatus\n  };\n};","map":{"version":3,"sources":["D:/PDM/IonicApp/myApp/src/network/useNetwork.tsx"],"names":["useEffect","useState","Plugins","BackgroundTask","Network","Storage","initialState","connected","connectionType","buildTrainProps","train","useNetwork","networkStatus","setNetworkStatus","handler","addListener","handleNetworkStatusChange","getStatus","then","canceled","remove","status","console","log","taskId","beforeExit","items","keys","i","length","startsWith","res","get","key","value","push","JSON","parse","item","error","finish"],"mappings":"AAAA,SAAoBA,SAApB,EAA+BC,QAA/B,QAA8C,OAA9C;AACA,SAAwBC,OAAxB,QAAuC,iBAAvC;AAMA,MAAM;AAAEC,EAAAA;AAAF,IAAqBD,OAA3B;AAEA,MAAM;AAAEE,EAAAA;AAAF,IAAcF,OAApB;AAEA,MAAM;AAAEG,EAAAA;AAAF,IAAcH,OAApB;AAEA,MAAMI,YAAY,GAAG;AACnBC,EAAAA,SAAS,EAAE,KADQ;AAEnBC,EAAAA,cAAc,EAAE;AAFG,CAArB;;AAKA,SAASC,eAAT,CAAyBC,KAAzB,EAA2C;AACzC,SAAOA,KAAP;AACD;;AAED,OAAO,MAAMC,UAAU,GAAG,MAAM;AAC9B,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCZ,QAAQ,CAACK,YAAD,CAAlD;AACAN,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMc,OAAO,GAAGV,OAAO,CAACW,WAAR,CAAoB,qBAApB,EAA2CC,yBAA3C,CAAhB;AACAZ,IAAAA,OAAO,CAACa,SAAR,GAAoBC,IAApB,CAAyBF,yBAAzB;AACA,QAAIG,QAAQ,GAAG,KAAf;AACA,WAAO,MAAM;AACXA,MAAAA,QAAQ,GAAG,IAAX;AACAL,MAAAA,OAAO,CAACM,MAAR;AACD,KAHD;;AAKA,aAASJ,yBAAT,CAAmCK,MAAnC,EAA0D;AACxDC,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CF,MAA1C;;AACA,UAAI,CAACF,QAAL,EAAe;AACb,YAAGE,MAAM,CAACd,SAAV,EAAoB;AAClB,cAAIiB,MAAM,GAAGrB,cAAc,CAACsB,UAAf,CAA0B,YAAY;AACjDH,YAAAA,OAAO,CAACC,GAAR,CAAY,yCAAZ;AAEA,gBAAIG,KAAK,GAAG,EAAZ;AACA,kBAAM;AAACrB,cAAAA;AAAD,gBAAYH,OAAlB,CAJiD,CAKjD;;AACA,kBAAM;AAACyB,cAAAA;AAAD,gBAAS,MAAMtB,OAAO,CAACsB,IAAR,EAArB;;AACA,iBAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,IAAI,CAACE,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,kBAAID,IAAI,CAACC,CAAD,CAAJ,CAAQE,UAAR,CAAmB,SAAnB,CAAJ,EAAmC;AACjC,sBAAMC,GAAG,GAAG,MAAM1B,OAAO,CAAC2B,GAAR,CAAY;AAACC,kBAAAA,GAAG,EAAEN,IAAI,CAACC,CAAD;AAAV,iBAAZ,CAAlB;;AACA,oBAAIG,GAAG,CAACG,KAAR,EAAe;AACbR,kBAAAA,KAAK,CAACS,IAAN,CAAW1B,eAAe,CAAC2B,IAAI,CAACC,KAAL,CAAWN,GAAG,CAACG,KAAf,CAAD,CAA1B;AACD;AACF;AACF;;AAGD,iBAAI,IAAIN,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACF,KAAK,CAACG,MAArB,EAA6BD,CAAC,EAA9B,EAAiC;AAC/B,oBAAMU,IAAI,GAAGZ,KAAK,CAACE,CAAD,CAAlB;;AACA,kBAAI,CACF;AACD,eAFD,CAEC,OAAOW,KAAP,EAAa;AACZjB,gBAAAA,OAAO,CAACC,GAAR,CAAY,sCAAsCe,IAAlD;AACD;AAEF;;AAGDhB,YAAAA,OAAO,CAACC,GAAR,CAAY,0CAAZ;AACApB,YAAAA,cAAc,CAACqC,MAAf,CAAsB;AAAEhB,cAAAA;AAAF,aAAtB;AACD,WA9BY,CAAb;AA+BD;;AACDX,QAAAA,gBAAgB,CAACQ,MAAD,CAAhB;AACD;AACF;AACF,GAhDQ,EAgDN,EAhDM,CAAT;AAiDA,SAAO;AAAET,IAAAA;AAAF,GAAP;AACD,CApDM","sourcesContent":["import {useContext, useEffect, useState} from 'react';\nimport { NetworkStatus, Plugins } from '@capacitor/core';\nimport {useBackgroundTask} from \"./useBackgroundTask\";\nimport {TrainProps} from \"../todo/TrainProps\";\nimport {updateTrain} from \"../todo/TrainsAPI\";\nimport {AuthContext} from \"../auth\";\n\nconst { BackgroundTask } = Plugins;\n\nconst { Network } = Plugins;\n\nconst { Storage } = Plugins\n\nconst initialState = {\n  connected: false,\n  connectionType: 'unknown',\n}\n\nfunction buildTrainProps(train: TrainProps){\n  return train;\n}\n\nexport const useNetwork = () => {\n  const [networkStatus, setNetworkStatus] = useState(initialState)\n  useEffect(() => {\n    const handler = Network.addListener('networkStatusChange', handleNetworkStatusChange);\n    Network.getStatus().then(handleNetworkStatusChange);\n    let canceled = false;\n    return () => {\n      canceled = true;\n      handler.remove();\n    }\n\n    function handleNetworkStatusChange(status: NetworkStatus) {\n      console.log('useNetwork - status change', status);\n      if (!canceled) {\n        if(status.connected){\n          let taskId = BackgroundTask.beforeExit(async () => {\n            console.log('useBackgroundTask - executeTask started');\n\n            let items = []\n            const {Storage} = Plugins;\n            //const {token} = await Storage.get({key: \"token\"});\n            const {keys} = await Storage.keys();\n            for (let i = 0; i < keys.length; i++) {\n              if (keys[i].startsWith(\"Bought:\")) {\n                const res = await Storage.get({key: keys[i]});\n                if (res.value) {\n                  items.push(buildTrainProps(JSON.parse(res.value)));\n                }\n              }\n            }\n\n\n            for(let i=0; i<items.length; i++){\n              const item = items[i];\n              try {\n                //const savedItem = await (item._id ? updateTrain(token, item) : updateTrain(token, item));\n              }catch (error){\n                console.log(\"error trying to update data for: \" + item);\n              }\n\n            }\n\n\n            console.log('useBackgroundTask - executeTask finished');\n            BackgroundTask.finish({ taskId });\n          });\n        }\n        setNetworkStatus(status);\n      }\n    }\n  }, [])\n  return { networkStatus };\n};\n"]},"metadata":{},"sourceType":"module"}