{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport { Plugins } from '@capacitor/core';\nimport { updateTrain } from \"../todo/TrainsAPI\";\nconst {\n  BackgroundTask\n} = Plugins;\nconst {\n  Network\n} = Plugins;\nconst {\n  Storage\n} = Plugins;\nconst initialState = {\n  connected: false,\n  connectionType: 'unknown'\n};\n\nfunction buildTrainProps(train) {\n  return train;\n}\n\nexport const useNetwork = () => {\n  const [networkStatus, setNetworkStatus] = useState(initialState);\n  useEffect(() => {\n    const handler = Network.addListener('networkStatusChange', handleNetworkStatusChange);\n    Network.getStatus().then(handleNetworkStatusChange);\n    let canceled = false;\n    return () => {\n      canceled = true;\n      handler.remove();\n    };\n\n    async function handleNetworkStatusChange(status) {\n      console.log('useNetwork - status change', status);\n\n      if (!canceled) {\n        if (status.connected) {\n          console.log('useBackgroundTask - executeTask started');\n          let items = [];\n          const {\n            Storage\n          } = Plugins;\n          const res = await Storage.get({\n            key: 'user'\n          });\n          let token;\n\n          if (res.value) {\n            console.log('User found', JSON.parse(res.value));\n            token = res.value;\n          } else {\n            console.log('User not found');\n            token = '';\n          }\n\n          const {\n            keys\n          } = await Storage.keys();\n\n          for (let i = 0; i < keys.length; i++) {\n            if (keys[i].startsWith('Bought:')) {\n              const res = await Storage.get({\n                key: keys[i]\n              });\n\n              if (res.value) {\n                items.push(buildTrainProps(JSON.parse(res.value)));\n                console.log(res.value);\n              }\n            }\n          }\n\n          for (let i = 0; i < items.length; i++) {\n            const item = items[i];\n\n            try {\n              if (token !== '') {\n                const savedItem = await (item._id ? updateTrain(token, item) : updateTrain(token, item));\n\n                if (savedItem && savedItem) {\n                  console.log(\"Saved: \" + savedItem);\n                }\n              }\n            } catch (error) {\n              console.log(\"error trying to update data for: \" + item);\n            }\n          }\n\n          console.log('useBackgroundTask - executeTask finished'); // let taskId = BackgroundTask.beforeExit(async () => {\n          //   console.log('useBackgroundTask - executeTask started');\n          //\n          //   let items = []\n          //   const {Storage} = Plugins;\n          //   const res = await Storage.get({ key: 'user' });\n          //   let token;\n          //   if (res.value) {\n          //     console.log('User found', JSON.parse(res.value));\n          //     token = res.value;\n          //   } else {\n          //     console.log('User not found');\n          //     token = '';\n          //   }\n          //   const {keys} = await Storage.keys();\n          //   for (let i = 0; i < keys.length; i++) {\n          //     if (keys[i].startsWith('Bought:')) {\n          //       const res = await Storage.get({key: keys[i]});\n          //       if (res.value) {\n          //         items.push(buildTrainProps(JSON.parse(res.value)));\n          //       }\n          //     }\n          //   }\n          //\n          //\n          //   for(let i=0; i<items.length; i++){\n          //     const item = items[i];\n          //     try {\n          //       if(token !== '') {\n          //         const savedItem = await (item._id ? updateTrain(token, item) : updateTrain(token, item));\n          //         if(savedItem && savedItem){\n          //           console.log(\"Saved: \" + savedItem);\n          //         }\n          //       }\n          //     }catch (error){\n          //       console.log(\"error trying to update data for: \" + item);\n          //     }\n          //   }\n          //\n          //\n          //   console.log('useBackgroundTask - executeTask finished');\n          //   BackgroundTask.finish({ taskId });\n          // });\n        }\n\n        setNetworkStatus(status);\n      }\n    }\n  }, []);\n  return {\n    networkStatus\n  };\n};","map":{"version":3,"sources":["D:/PDM/IonicApp/myApp/src/network/useNetwork.tsx"],"names":["useEffect","useState","Plugins","updateTrain","BackgroundTask","Network","Storage","initialState","connected","connectionType","buildTrainProps","train","useNetwork","networkStatus","setNetworkStatus","handler","addListener","handleNetworkStatusChange","getStatus","then","canceled","remove","status","console","log","items","res","get","key","token","value","JSON","parse","keys","i","length","startsWith","push","item","savedItem","_id","error"],"mappings":"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","sourcesContent":["import {useContext, useEffect, useState} from 'react';\nimport { NetworkStatus, Plugins } from '@capacitor/core';\nimport {useBackgroundTask} from \"./useBackgroundTask\";\nimport {TrainProps} from \"../todo/TrainProps\";\nimport {updateTrain} from \"../todo/TrainsAPI\";\nimport {AuthContext} from \"../auth\";\n\nconst { BackgroundTask } = Plugins;\n\nconst { Network } = Plugins;\n\nconst { Storage } = Plugins\n\nconst initialState = {\n  connected: false,\n  connectionType: 'unknown',\n}\n\nfunction buildTrainProps(train: TrainProps){\n  return train;\n}\n\nexport const useNetwork = () => {\n  const [networkStatus, setNetworkStatus] = useState(initialState)\n  useEffect(() => {\n    const handler = Network.addListener('networkStatusChange', handleNetworkStatusChange);\n    Network.getStatus().then(handleNetworkStatusChange);\n    let canceled = false;\n    return () => {\n      canceled = true;\n      handler.remove();\n    }\n\n    async function handleNetworkStatusChange(status: NetworkStatus) {\n      console.log('useNetwork - status change', status);\n      if (!canceled) {\n        if (status.connected) {\n\n          console.log('useBackgroundTask - executeTask started');\n\n          let items = []\n          const {Storage} = Plugins;\n          const res = await Storage.get({key: 'user'});\n          let token;\n          if (res.value) {\n            console.log('User found', JSON.parse(res.value));\n            token = res.value;\n          } else {\n            console.log('User not found');\n            token = '';\n          }\n          const {keys} = await Storage.keys();\n          for (let i = 0; i < keys.length; i++) {\n            if (keys[i].startsWith('Bought:')) {\n              const res = await Storage.get({key: keys[i]});\n              if (res.value) {\n                items.push(buildTrainProps(JSON.parse(res.value)));\n                console.log(res.value);\n              }\n            }\n          }\n\n\n          for (let i = 0; i < items.length; i++) {\n            const item = items[i];\n            try {\n              if (token !== '') {\n                const savedItem = await (item._id ? updateTrain(token, item) : updateTrain(token, item));\n                if (savedItem && savedItem) {\n                  console.log(\"Saved: \" + savedItem);\n                }\n              }\n            } catch (error) {\n              console.log(\"error trying to update data for: \" + item);\n            }\n          }\n\n\n          console.log('useBackgroundTask - executeTask finished');\n\n          // let taskId = BackgroundTask.beforeExit(async () => {\n          //   console.log('useBackgroundTask - executeTask started');\n          //\n          //   let items = []\n          //   const {Storage} = Plugins;\n          //   const res = await Storage.get({ key: 'user' });\n          //   let token;\n          //   if (res.value) {\n          //     console.log('User found', JSON.parse(res.value));\n          //     token = res.value;\n          //   } else {\n          //     console.log('User not found');\n          //     token = '';\n          //   }\n          //   const {keys} = await Storage.keys();\n          //   for (let i = 0; i < keys.length; i++) {\n          //     if (keys[i].startsWith('Bought:')) {\n          //       const res = await Storage.get({key: keys[i]});\n          //       if (res.value) {\n          //         items.push(buildTrainProps(JSON.parse(res.value)));\n          //       }\n          //     }\n          //   }\n          //\n          //\n          //   for(let i=0; i<items.length; i++){\n          //     const item = items[i];\n          //     try {\n          //       if(token !== '') {\n          //         const savedItem = await (item._id ? updateTrain(token, item) : updateTrain(token, item));\n          //         if(savedItem && savedItem){\n          //           console.log(\"Saved: \" + savedItem);\n          //         }\n          //       }\n          //     }catch (error){\n          //       console.log(\"error trying to update data for: \" + item);\n          //     }\n          //   }\n          //\n          //\n          //   console.log('useBackgroundTask - executeTask finished');\n          //   BackgroundTask.finish({ taskId });\n          // });\n        }\n        setNetworkStatus(status);\n      }\n    }\n  }, [])\n  return { networkStatus };\n};\n"]},"metadata":{},"sourceType":"module"}